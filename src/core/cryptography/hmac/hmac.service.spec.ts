import { HashAlgorithm } from '../shared/hash-algorithm.enum';
import { HmacService } from './hmac.service';

describe('HmacService', () => {
  const testCases: Array<any> = [
    {
      algorithm: HashAlgorithm.MD5,
      input: Buffer.from('Lorem ipsum dolor sit amet, consectetur adipiscing elit.'),
      secret: Buffer.from([
        0x4b, 0x08, 0x81, 0x35, 0x89, 0xe4, 0xa6, 0xde, 0xd9, 0xce, 0x98, 0xb2, 0x04, 0xf8, 0xa7, 0x8e, 0x74, 0x18, 0xb0, 0x0c, 0x7c, 0xa5, 0x6b, 0xcd, 0x0a,
        0x07, 0x8f, 0xf7, 0x21, 0x6a, 0x83, 0xb0
      ]),
      expected: 'a04558ba619bb216c78b05feaf50e5fa'
    },
    {
      algorithm: HashAlgorithm.SHA1,
      input: Buffer.from('Lorem ipsum dolor sit amet, consectetur adipiscing elit.'),
      secret: Buffer.from([
        0x4b, 0x08, 0x81, 0x35, 0x89, 0xe4, 0xa6, 0xde, 0xd9, 0xce, 0x98, 0xb2, 0x04, 0xf8, 0xa7, 0x8e, 0x74, 0x18, 0xb0, 0x0c, 0x7c, 0xa5, 0x6b, 0xcd, 0x0a,
        0x07, 0x8f, 0xf7, 0x21, 0x6a, 0x83, 0xb0
      ]),
      expected: 'ae7acf25afa62d7a13c8cd4e84b479c383d4ea64'
    },
    {
      algorithm: HashAlgorithm.SHA256,
      input: Buffer.from('Lorem ipsum dolor sit amet, consectetur adipiscing elit.'),
      secret: Buffer.from([
        0x4b, 0x08, 0x81, 0x35, 0x89, 0xe4, 0xa6, 0xde, 0xd9, 0xce, 0x98, 0xb2, 0x04, 0xf8, 0xa7, 0x8e, 0x74, 0x18, 0xb0, 0x0c, 0x7c, 0xa5, 0x6b, 0xcd, 0x0a,
        0x07, 0x8f, 0xf7, 0x21, 0x6a, 0x83, 0xb0
      ]),
      expected: 'd67fa0266066e410d46023585b608e3913057bd0e37386dee5c075da03255996'
    },
    {
      algorithm: HashAlgorithm.SHA384,
      input: Buffer.from('Lorem ipsum dolor sit amet, consectetur adipiscing elit.'),
      secret: Buffer.from([
        0x4b, 0x08, 0x81, 0x35, 0x89, 0xe4, 0xa6, 0xde, 0xd9, 0xce, 0x98, 0xb2, 0x04, 0xf8, 0xa7, 0x8e, 0x74, 0x18, 0xb0, 0x0c, 0x7c, 0xa5, 0x6b, 0xcd, 0x0a,
        0x07, 0x8f, 0xf7, 0x21, 0x6a, 0x83, 0xb0
      ]),
      expected: 'ee5a000f6c8e8839dcfcedb7c82a26987d585eeddda755802da2aca2437005c0594baa6b08112d4fc8d93f2ebda5fa5c'
    },
    {
      algorithm: HashAlgorithm.SHA512,
      input: Buffer.from('Lorem ipsum dolor sit amet, consectetur adipiscing elit.'),
      secret: Buffer.from([
        0x4b, 0x08, 0x81, 0x35, 0x89, 0xe4, 0xa6, 0xde, 0xd9, 0xce, 0x98, 0xb2, 0x04, 0xf8, 0xa7, 0x8e, 0x74, 0x18, 0xb0, 0x0c, 0x7c, 0xa5, 0x6b, 0xcd, 0x0a,
        0x07, 0x8f, 0xf7, 0x21, 0x6a, 0x83, 0xb0
      ]),
      expected: '296c3a20d302ba5230b99fa953a4427ab2f757b3bec01790dfc02e5d1ac3df94420d563e67e0eef7fc8f43c34becba3da87935b3c8da930c38815e784ad58fa2'
    }
  ];

  testCases.forEach(({ algorithm, input, secret, expected }) => {
    it(`should create digest propery (${algorithm})`, () => {
      const service: HmacService = HmacService.create(algorithm);
      const actual: string = service.digest(input, secret).toString('hex');

      expect(actual).toEqual(expected);
    });
  });
});
